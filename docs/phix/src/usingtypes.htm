<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Using Types</h1>
      <div id="mainSection">
         So far you have already seen some examples of variable types but now we will
         define types more precisely.
       <br>
       <br>
         Variable declarations have a type name followed by a list of the variables
         being declared. For example,
<!--eucode>
    object a
    global integer x, y, z
    procedure fred(sequence q, sequence r)
</eucode-->
<pre>
<font color="#004080">    object</font><font color="#000000"> a</font>
<font color="#008080">    global</font><font color="#004080"> integer</font><font color="#000000"> x</font><font color="#0000FF">,</font><font color="#000000"> y</font><font color="#0000FF">,</font><font color="#000000"> z</font>
<font color="#008080">    procedure</font><font color="#000000"> fred</font><font color="#0000FF">(</font><font color="#004080">sequence</font><font color="#000000"> q</font><font color="#0000FF">,</font><font color="#004080"> sequence</font><font color="#000000"> r</font><font color="#0000FF">)</font>
</pre>
         The types:
        <a href="object.htm">object</a>,
        <a href="sequence.htm">sequence</a>,
        <a href="string.htm">string</a>,
        <a href="atom.htm">atom</a>, and
        <a href="integer.htm">integer</a> are <a href="language.htm"><b>predefined</b></a>.<br>
         Variables of type <a href="object.htm">object</a> may take on <b><i>any</i></b> value.<br>
         Those declared with type <a href="sequence.htm">sequence</a> must always be sequences.<br>
         Those declared with type <a href="string.htm">string</a> must always be strings, with every element fitting in a byte.<br>
         &nbsp;&nbsp;<small>[pass UTF8 byte-strings through <a href="utf8_to_utf32.htm">utf8_to_utf32</a>() to get codepoints/graphemes.]</small><br>
         Those declared with type <a href="atom.htm">atom</a> must always be atoms.
       <br>
       <a name=integer></a>
       <br>
        Those declared with type <a href="integer.htm">integer</a> must be atoms with integer values from -1,073,741,824
        to +1,073,741,823 inclusive on 32 bit, or -4,611,686,018,427,387,904 to +4,611,686,018,427,387,903 on 64 bit. 
        You can perform exact calculations on larger integer values, up to about 15 decimal digits on 32-bit, 19 on 64-bit,
        but declare them as <a href="atom.htm">atom</a>, rather than integer.
       <br>
       <a name=type></a>
       <br>
        To augment the <a href="usingtypes.htm">predefined types</a>, you can create <b>user-defined types</b>.
        All you have to do is define a single-parameter function, but declare it with <b>type ... end type</b>
        instead of <b>function ... end function</b>. For example,
<!--eucode>
    type hour(integer x)
        return x>=0 and x<=23
    end type
    hour h1, h2
    h1 = 10      -- ok
    h2 = 25      -- error! program aborts with a message
</eucode-->
<pre>
<font color="#008080">    type</font><font color="#000000"> hour</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> x</font><font color="#0000FF">)</font>
<font color="#008080">        return</font><font color="#000000"> x</font><font color="#0000FF">&gt;=</font><font color="#000000">0</font><font color="#008080"> and</font><font color="#000000"> x</font><font color="#0000FF">&lt;=</font><font color="#000000">23</font>
<font color="#008080">    end type</font>
<font color="#000000">    hour h1</font><font color="#0000FF">,</font><font color="#000000"> h2
    h1</font><font color="#0000FF"> =</font><font color="#000000"> 10     </font><font color="#000080"><i> -- ok</i></font>
<font color="#000000">    h2</font><font color="#0000FF"> =</font><font color="#000000"> 25     </font><font color="#000080"><i> -- error! program aborts with a message</i></font>
</pre>
         Variables h1 and h2 can only be assigned integer values in the range 0 to 23 inclusive. <br>
         After each assignment to h1 or h2 the interpreter will call hour(), passing the new value. <br>
         The value will first be checked to see if it is an integer (because of "integer x"). <br>
         If it is, the return statement will be executed to test the value of x (i.e. the new value of h1 or h2). <br>
         If hour() returns <a href="logicops.htm#tf">true</a>, execution continues normally. <br>
         If hour() returns <a href="logicops.htm#tf">false</a> then the program is aborted with a suitable diagnostic message.
        <br>
        <br>
         "hour" can be used to declare subroutine parameters as well:
<!--eucode>
     procedure set_time(hour h)
</eucode-->
<pre>
<font color="#008080">     procedure</font><font color="#000000"> set_time</font><font color="#0000FF">(</font><font color="#000000">hour h</font><font color="#0000FF">)</font>
</pre>
         set_time() can only be called with a reasonable value for parameter h,
         otherwise the program will abort with a message.
       <br>
       <br>
         A variable&rsquo;s type is checked after each assignment to the variable, except where the compiler can predetermine 
         that such a check is not necessary, and the program terminates immediately should the type function return
         <a href="logicops.htm#tf">false</a>. Subroutine parameter types are checked each time that the subroutine is called. <br>
         This checking guarantees that a variable can never have a value that does not belong to the type of that variable.
       <dl>
        <dt>
         <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
        </dt>
        <dd>
        Note that JavaScript is a <i><a href="glossary.htm#typeless">typeless</a></i> language, you cannot even 
        specify that a variable is or should be (say) an <a href="integer.htm">integer</a>, and hence both the 
        builtin and any user defined types are <i>"in name only"</i> (or perhaps more accurately "in comment only") 
        under <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>, in that you can declare and 
        explicitly check variables, but they are <b><i>not</i></b> automatically checked on assignment or modification, 
        and hence do <i>not</i> (except in a tiny number of extremely rare cases) trigger runtime errors. 
        Generally speaking the developer is expected to iron out any typecheck errors and other bugs on the desktop first, 
        before attempting to run the program in a web browser - should you skip that and adopt a more direct edit/browser 
        development cycle, that&rsquo;s on you.
        </dd>
       </dl>

       <dl>
        <dt>
         <a name=can></a>
         <b>
          <font color="navy">Notes:</font>
         </b>
        </dt>
        <dd>
         Technically a user defined type can only be used to prove an object is definitely 
         <i>not</i> an instance of that type. <br>
         While 4 is certainly an integer, it could be an hour, or a minute, or a second; 
         there is simply no way to tell. 
         <br>
         <br>
         If a more precise implementation is required, instances must be explicitly tagged, 
         say {HOUR,4} or {MINUTE,4} where HOUR and MINUTE are application-unique constants 
         (you could in theory use the routine_id of the type definitions, or strings).<br>
         Such a scheme might still yield "false positives" if the application contains any
         untagged sequences.
         <br>
         <br>
         In my experience such "more advanced" type systems catch very few extra bugs, and 
         indeed sometimes implement more bugs than they ever catch, but don&rsquo;t let my 
         opinion dissuade you: properly tagged user defined types remain a perfectly valid 
         tactic in the war against bugs, and indeed [temporary] human-readable string tags
         can greatly simplify debugging. Besides, your coding habits may very well differ
         from mine sufficiently to tip the balance of usefulness quite dramatically. One 
         case where I <i>did</i> properly tag types was <a href="mpfr.htm">mpfr/gmp</a>,
         and that proved to be very useful indeed.
         <br>
         <br>
         Of course should you use <a href="sandc.htm">classes or structs</a> to hold your
         hours, minutes, and seconds, then precisely that kind of tagging and more is all
         performed automatically (ditto <a href="mpfr.htm">mpfr</a> variables), however 
         some other human-readability aspects are lost, as the ex.err typically show 
         references/pointers instead of the actual values, and there can be significant 
         additional overheads compared against the simpler native and more direct types.
<!--DEV more tests/thought required...
         <br>
         <br>
         For maximum flexibility, in terms of what you can test for being a given type,
         the type definition parameter should be declared as type object. However, that
         can limit compiler analysis leading to fewer potentially helpful error/warning 
         messages and possibly lower quality emitted code. 

         You can also "daisy-chain" type definitions to any depth, for instance worktime, 
         playtime, and sleeptime might be subsets of hour, and further lunchtime and 
         breaktime might be subsets of worktime. Note that when a type routine is invoked
         implicitly due to an assigment to a variable of that type, errors are propagated
         Whereas "function f(hour h)" may suffer
         a typecheck on the function definition line, "type playtime(hour h)" fails more
         gracefully, effectively propagating the error to the offending assignment, or 
         yielding <a href="logicops.htm#tf">false</a> when it is invoked explicitly.

         Using
         object may reduce clarity and require additional explicit tests buried within
         the body of the type declaration, whereas more restrictive parameter types, 
         eg "type hour(integer x)" instead of "type hour(object x)", may require use of 
         additional clauses such as "if integer(x) and hour(x) then" to avoid crashes.
-->
        </dd>
       </dl>
       <a name=typechk></a>
        Unlike other languages, the type of a variable does not affect any calculations on the variable. 
        Only the value of the variable matters in an expression. 
        The type just serves as an error check to prevent any "corruption" of the variable.
       <blockquote>
        Of course C and C-derived languages quite literally and conservatively speaking have hundreds of millions of types, 
        forcing the programmer to specify the exact low-level type of every value over and over and over again. Typically a 
        programmer is expected to perform several unsafe type casts on almost every programming statement. Astonishingly as
        soon as they make the slightest mistake the compiler quietly "fixes" it for them using something called type coercion, 
        aka applying an implicit or incorrectly specified unsafe cast, which rams the thing into place with a hammer if 
        necessary and almost inevitably leads to a catastrophic failure that can be extremely difficult to track down. 
        Obviously programmers with decades of experience handle such things with ease, but clearly not so for newcomers. 
        Phix turns the whole notion of types on its head: they are there to help the programmer, not punish them. In fact it 
        does not even have <i>any</i> real notion of type casting, since if you remember correctly it only has just 
        <a href="language.htm">five core builtin data types</a>, and in no cases whatsoever, under any circumstances, do 
        Phix types alter the meaning of a value by discarding precision or treating a slightly negative number as a massive 
        positive number, or cause say 1,000,000 * 1,000,000 to be stored as 1,874,919,424 or any other such nonsense. 
        Fear not however, it is perfectly straightforward to <i>explicitly</i> match such things should you really need to, 
        say in a hash function.
       </blockquote>
       <a name=duck></a>
        It might not be entirely unfair to say that Phix user defined types are an explict embodiment of duck typing:
<!--eucode>
type duck(object x)
    return gait(x)=WADDLE and noise(x)=QUACK and shape(x)=DUCK
end type
duck d = wolf // crashes, eg `typecheck error: d is "wolf"` 
              //  [at test.exw:4, rather than #00484480]
              // aka you cannot put a wolf in a duck house
</eucode-->
<pre>
<font color="#008080">type</font><font color="#000000"> duck</font><font color="#0000FF">(</font><font color="#004080">object</font><font color="#000000"> x</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#000000"> gait</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)=</font><font color="#000000">WADDLE</font><font color="#008080"> and</font><font color="#000000"> noise</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)=</font><font color="#000000">QUACK</font><font color="#008080"> and</font><font color="#000000"> shape</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)=</font><font color="#000000">DUCK</font>
<font color="#008080">end type</font>
<font color="#000000">duck d</font><font color="#0000FF"> =</font><font color="#000000"> wolf</font><font color="#000080"><i> // crashes, eg `typecheck error: d is "wolf"`
              //  [at test.exw:4, rather than #00484480]
              // aka you cannot put a wolf in a duck house</i></font>
</pre>
        However duck typing usually means the polar opposite: taking control <i>away</i> from the programmer and bravely/stupidly 
        carrying on long after things go wrong. A typical duck-typed language such as Python will quietly build a duck house bigger 
        than the pond it is meant to be sitting on, and come Sunday lunch (assuming you are carnivorous) it will happily let you 
        try and wring that wolf&rsquo;s neck and pluck it, which certainly ain&rsquo;t gona end well for you.
        On the other hand, strictly typed languages (such as anything C-based) may give you a clear compile-time error, which is 
        great (and Phix will often do too), but anything that gets past the compiler will [as per 100*100 resulting in (byte) 16, 
        from 1e4 being #2710 in hex] perform some horrendous cartoon-level violence to ram that big old hairy wolf into that tiny 
        little duck house, and in the debugger things will likely be completely unrecognisable and all rather messy.
        In contrast, Phix types are designed to stop (leaving the poor old wolf unharmed and your good self uneaten) with a clear 
        and readable (and catchable/loggable) runtime error as soon after and as close as possible to the initial error/mistake. 
        <br>
        <br>
        Type checking can be turned on or off between subroutines using the
        <b>with type_check</b> or <b>without type_check</b>
        <a href="specialtop.htm">special statements</a>. The latter means that the
        above hour() routine does not get called and the <code>x&gt;=0 and x&lt;=23</code>
        test is not performed, however it does not allow for instance a string to be 
        stored in a variable declared as integer or cause the internal checking (or 
        fatal errors) of that sort of thing to be disabled.
        Type checking is initially on by default.
       <dl>
        <dt>
         <b>
          <font color="navy">Note to Benchmarkers:</font>
         </b>
         <dd>
            When comparing the speed of Phix programs against programs written in other languages, specify 
            <b>without type_check</b> at the top of the file, which gives Phix permission to skip run-time 
            type checks, thereby saving some execution time. <br>
            All other checks are still  performed, e.g. subscript checking, uninitialized variable checking etc.<br>
            Even when you turn off type checking, Phix reserves the right to make
            checks at strategic places, since this can actually allow it to run your
            program <b><i>faster</i></b> in many cases.<br>
            So you may still get a type check failure even when you have turned off type checking. <br>
            Whether type checking is on or off, you will never get a <b><i>machine-level</i></b> exception.<br>
            <b>You will always get a meaningful message from Phix when something goes wrong.</b>
             (<i>This might not be the case when you <a href="poke.htm">poke</a>
             directly into memory, or call routines written in C or machine code.</i>)
         </dd>
        </dt>
       </dl>
        The Phix method of defining types is much simpler than what you will 
        find in most other languages, yet it provides the programmer with
        <b><i>greater</i></b> flexibility in defining the legal values for a type of data. Any algorithm
        can be used to include or exclude values. You can even declare a variable
        to be of type <a href="object.htm">object</a> which will allow it to take on
        <b><i>any</i></b> value. Routines can be written to work with very specific types, or very general types.
       <br>
       <br>
        For small programs, there is little advantage to defining new types, and
        beginners may wish to stick with the five <a href="usingtypes.htm">predefined types</a>.
<!-- uh? - 27/6/24, why on earth would I want to put that suggestion in anyone's head?
        , or even declare all variables as <a href="object.htm">object</a>.
-->
       <br>
       <br>
        For larger programs, strict type definitions can greatly aid the process
        of debugging. Logic errors are caught closer to their source and are not
        allowed to propagate in subtle ways throughout the rest of the program.
        Furthermore, it is much easier to reason about the misbehavior of a
        section of code when you know the variables involved always have a 
        legal/plausible value, albeit perhaps not precisely that desired.
       <br>
       <br>
        Types also provide meaningful, machine-checkable documentation about your
        program, making it easier for you or others to understand your code at a
        later date. Combined with the <a href="subscripts.htm">subscript limits</a>, 
        uninitialized variable, and other checking that is always present, 
        strict run-time type checking makes debugging much easier in Phix than in most other
        languages. It also increases the reliability of the final program since
        many latent bugs that would have survived the testing phase in other
        languages will have been caught by Phix.
       <dl>
        <dt>
         <b>
          <font color="navy">Anecdote 1:</font>
         </b>
        </dt>
        <dd>
         In porting a large C program to Euphoria (on which Phix is based), a number
         of latent bugs were discovered. Although this C program was believed to be
         totally "correct", Rob found: a situation where an uninitialized variable
         was being read; a place where element number "-1" of an array was routinely
         written and read; and a situation where something was written just off the
         screen. These problems resulted in errors that were not easily visible to a
         casual observer, so they had survived testing of the C code.
        </dd>
        <dt>
         <b>
          <font color="navy">Anecdote 2:</font>
         </b>
        </dt>
        <dd>
         The Quick Sort algorithm presented on page 117 of
         <i>Writing Efficient Programs</i> by Jon Bentley has a subscript error! The algorithm will
         sometimes read the element just <i>before</i> the beginning of the array
         to be sorted, and will sometimes read the element just <i>after</i> the end of the array.
         Whatever garbage is read, the algorithm will still work - this is probably
         why the bug was never caught. But what if there isn&rsquo;t any (virtual) 
         memory just before or just after the array? Bentley later modifies the 
         algorithm such that this bug goes away -- but he presented this version as 
         being correct.
         <b><i><font color="navy">Even the experts need subscript checking!</font></i></b>
        </dd>
        <dt>
         <b>
          <font color="navy">Performance Note:</font>
         </b>
         <dd>
          When typical user-defined types are used extensively, type
          checking adds only 20 to 40 percent to execution time. Leave it on unless
          you really need the extra speed. You might also consider turning it off for
          just a few heavily-executed routines.
          <a href="debugging.htm#2">Profiling</a> can help with this decision.
         </dd>
        </dt>
       </dl>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
