--
-- demo\xpGUI\aaline.exw
-- =====================
-- (apart from the dialog title, [will be] the 
--  same as demo\rosetta\XiaolinWuLine.exw)
--
--  Resize the window to show lines at any angle
--
--  TODO: get dashed/dotted and width>1 lines working, then shift into xpGUI.e
--          (WOW, that all seems just //too// easy!!!)
--
--DEV this all needs quite a bit of cleanup...
--  For education/comparision purposes only: see demo\pGUI\aaline.exw
--  for a much shorter version, but "wrong algorithm" for the RC task.
--DEV:???
--  Also note this blends with BACK rather than the actual pixel,
--  whereas ??aaline.exw does it properly.
--
with javascript_semantics   -- not really fair: pwa/p2js uses OpenGL
-- and does not draw bresenham lines anyway/ever.

--requires(64,true)
--requires("1.0.3")
include xpGUI.e
--include xpGUI3.e -- no BGCLR, LINEWIDTH but no jump on space...
--include backup\xpGUI.0003.e -- BAD
--include F:\misc\porn\2\13\backup\xpGUI.1829.e -- NO JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2004.e -- NO JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2088.e -- NO JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2122.e -- NO JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2126.e -- NO JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2127.e -- JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2128.e -- JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2130.e -- JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2140.e -- JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2147.e -- JUMP, ""
--include F:\misc\porn\2\13\backup\xpGUI.2148.e -- X
--include F:\misc\porn\2\13\backup\xpGUI.2680.e -- BAD, ""
--include F:\misc\porn\2\13\backup\xpGUI.3207.e -- BAD
--include F:\misc\porn\2\13\backup\xpGUI.3577.e -- BAD
--include F:\misc\porn\2\13\backup\xpGUI.3870.e -- BAD
--gUseGTK()     -- ditto, GTK does not draw bresenham lines either

constant TITLE = "Anti aliased lines"

--bool wuline = true    -- space toggles, for comparison
bool wuline = false -- space toggles, for comparison
                    -- when false, at least under WinAPI, it draws bresenham 
                    --  lines (ie jagged, without anti-aliasing [desktop only]).
sequence xs = {},
         ys = {},
         cs = {}

integer BACK = XPG_PARCHMENT,
        LINE = XPG_BLUE,
        {rB, gB, bB} = to_rgba(BACK),
        {rL, gL, bL} = to_rgba(LINE)

procedure plot(gdx canvas, atom x, y, c, bool bFlip=false)
--  plot the pixel at (x, y) with brightness c (where 0 <= c <= 1)
--  note that bFlip is exclusively intended for wu_line() only.
    if bFlip then {x,y} = {y,x} end if
    atom C = 1-c
    c = rgba(rL*c+rB*C,gL*c+gB*C,bL*c+bB*C)
--?{"pixel",x,y,c}
    gCanvasPixel(canvas, x, y, c)
--  gCanvasPixel(canvas, x+0.5, y+0.5, c)
--end if
end procedure

procedure plot2(gdx canvas, atom x, y, f, xgap, integer width, bool bFlip)
--  plot(canvas,x,y,(1-f)*xgap,bFlip)
--  plot(canvas,x,y+1,(f)*xgap,bFlip)
--/!*
    integer d = floor(width/2)
    plot(canvas,x,y-d,(1-f)*xgap,bFlip)
    if d=0 then
        plot(canvas,x,y+1,(f)*xgap,bFlip)
    else
        for i=-d+1 to d-1 do 
            plot(canvas,x,y+i,1,bFlip)
        end for
        plot(canvas,x,y+d,(f)*xgap,bFlip)
    end if
--*!/
end procedure

function fpart(atom x)
    return x-floor(x)   -- fractional part of x
end function

procedure wu_line(gdx canvas, atom x1, y1, x2, y2, integer width=1)
    bool flip := abs(y2-y1) > abs(x2-x1) -- (aka steep)
    if flip then
        {x1, y1, x2, y2} := {y1, x1, y2, x2}
    end if
    if x1>x2 then
        {x1, x2, y1, y2} := {x2, x1, y2, y1}
    end if
    
    atom dx := x2-x1,
         dy := y2-y1,
         gradient := iff(dx=0? 1 : dy/dx),
         x1end := round(x1),
         x2end := round(x2),
         y1end := y1 + gradient*(x1end-x1),
         y2end := y2 + gradient*(x2end-x2)

    -- handle first endpoint
    plot2(canvas, x1end, floor(y1end), fpart(y1end), 1-fpart(x1+0.5), width, flip)
    
    -- main loop
    atom intery := y1end + gradient -- first y-intersection for the main loop
--integer dots = 0
    for x = x1end+1 to x2end-1 do
--dots += 1
--if remainder(dots,8)<4 then
        plot2(canvas, x, floor(intery), fpart(intery), 1, width, flip)
--end if
        intery += gradient
    end for

    -- handle second endpoint
    plot2(canvas, x2end, floor(y2end), fpart(y2end), fpart(x2+0.5), width, flip)

end procedure

procedure plot_4_points(gdx canvas, integer xc, yc, x, y, atom f, angle1=0, angle2=360, angle=0)
    integer x1 = xc+x, x2 = xc-x,
            y1 = yc+y, y2 = yc-y
--DEV angles have changed meaning, comments may be out of date/inverted...
    if angle<0 or angle>90.01 then ?9/0 end if
    if      angle >=angle1 and      angle <=angle2 then plot(canvas,x1, y1, f) end if   -- top right
    if (180-angle)>=angle1 and (180-angle)<=angle2 then plot(canvas,x2, y1, f) end if   -- top left
    if (180+angle)>=angle1 and (180+angle)<=angle2 then plot(canvas,x2, y2, f) end if   -- btm left
    if (360-angle)>=angle1 and (360-angle)<=angle2 then plot(canvas,x1, y2, f) end if   -- btm right
end procedure

procedure wu_ellipse(gdx canvas, atom xc, yc, w, h, angle1=0, angle2=360, integer width=1)
--procedure wu_ellipse(gdx canvas, atom xc, yc, h, w, angle1=0, angle2=360)
--procedure wu_ellipse(gdx canvas, atom yc, xc, w, h, angle1=0, angle2=360)
--
-- (draws a circle when w=h) credit:
-- https://yellowsplash.wordpress.com/2009/10/23/fast-antialiased-circles-and-ellipses-from-xiaolin-wus-concepts/
--
    if w<=0 or h<=0 then return end if
    xc = round(xc)
    yc = round(yc)
    w = round(w)
    h = round(h)
    angle1 = mod(angle1,360)
    angle2 = mod(angle2,360)

    -- Match gCanvasArc/Sector angles:
    angle1 = atan2((h/2)*sin(angle1*XPG_DEG2RAD), (w/2)*cos(angle1*XPG_DEG2RAD))*XPG_RAD2DEG
    angle2 = atan2((h/2)*sin(angle2*XPG_DEG2RAD), (w/2)*cos(angle2*XPG_DEG2RAD))*XPG_RAD2DEG

    if angle2<=angle1 then angle2 += 360 end if

    atom a := w/2, asq := a*a, 
         b := h/2, bsq := b*b,
         sqab = sqrt(asq+bsq),
         ffd = round(asq/sqab), -- forty-five-degree coord
         xj, yj, frc, flr, angle

    -- draw top right, and the 3 mirrors of it in horizontal fashion
    --  (ie 90 to 45 degrees for a circle)

    integer d = floor(width/2)
--integer dots = 0
    for xi=0 to ffd do
--dots += 1
--if remainder(dots,8)<4 then
        yj := b*sqrt(1-xi*xi/asq)   -- real y value
        frc := fpart(yj)
        flr := floor(yj)
        angle := iff(xi=0?90:arctan(yj/xi)*XPG_RAD2DEG)
--      plot_4_points(canvas, xc, yc, xi, flr, 1-frc, angle1, angle2, angle)
--      plot_4_points(canvas, xc, yc, xi, flr+1, frc, angle1, angle2, angle)
--/!*
        plot_4_points(canvas, xc, yc, xi, flr-d, 1-frc, angle1, angle2, angle)
        if d=0 then
            plot_4_points(canvas, xc, yc, xi, flr+1, frc, angle1, angle2, angle)
        else
            for i=-d+1 to d-1 do
                plot_4_points(canvas, xc, yc, xi, flr+i, 1, angle1, angle2, angle)
            end for
            plot_4_points(canvas, xc, yc, xi, flr+d,   frc, angle1, angle2, angle)
        end if
--*!/
--end if
    end for

    -- switch from horizontal to vertial mode for the rest, ditto 3
    -- (ie 45..0 degrees for a circle)

    ffd = round(bsq/sqab)
    for yi=0 to ffd do
--dots += 1
--if remainder(dots,8)<4 then
        xj := a*sqrt(1-yi*yi/bsq)   -- real x value
        frc := fpart(xj)
        flr := floor(xj)
        angle = iff(xj=0?0:arctan(yi/xj)*XPG_RAD2DEG)
--      plot_4_points(canvas, xc, yc, flr, yi, 1-frc, angle1, angle2, angle)
--      plot_4_points(canvas, xc, yc, flr+1, yi, frc, angle1, angle2, angle)
--/!*
        plot_4_points(canvas, xc, yc, flr-d, yi, 1-frc, angle1, angle2, angle)
        if d=0 then
            plot_4_points(canvas, xc, yc, flr+1, yi, frc, angle1, angle2, angle)
        else
            for i=-d+1 to d-1 do
                plot_4_points(canvas, xc, yc, flr+i, yi, 1, angle1, angle2, angle)
            end for
            plot_4_points(canvas, xc, yc, flr+d, yi,   frc, angle1, angle2, angle)
        end if
--*!/
--end if
    end for

end procedure

--Aside: my very first use drew a 600 pixel wide and 420 pixel high curve, and
--       called itself recursively 2,458 times, with a maximum call depth of a
--       mere 12, and plotting just 1,230 pixels, pretty good methinks for a
--       wild stab of "dx<=1 and dy<=1". Clearly 615 pixels would not suffice,
--       so that puts a hard ceiling of less than twofold improvement on it.
--       update: with the ceils, just 821 pixel pairs now get plotted.
--       
--integer cbc = 0
--integer maxd = 0, d = 0
--integer cbp = 0
--integer dots = 0
integer wu_d = 1
procedure wu_bezier(gdx canvas, atom x1, y1, x2, y2, x3, y3, x4, y4)
--if cbc=0 then
--  ?{"CanvasCubicBezier",x1, y1, x2, y2, x3, y3, x4, y4}
--end if
--cbc += 1
--d += 1
--if d>maxd then maxd = d end if
    -- draw a cubic bezier curve from x1,y1 to x4,y4 
    --          using control points x2,y2 and x3,y3
    -- aside: {x2,y2}={x3,y3} shd == gCanvasQuadBezier
    --
    -- Uses the de Castejau method, with particular credit to 
    -- https://hcklbrrfnn.files.wordpress.com/2012/08/bez.pdf
    --
    atom dx = abs(x1-x4),
         dy = abs(y1-y4)
--?{dx,dy}
--sleep(1)
    if dx<=1 and dy<=1 then
        --
        -- It is quite likely we will have split a segment length 1.5
        -- into 0.76 and 0.77, since nowt here is genuinely straight,
        -- and one of those straddles (say) y=12 whereas the other is 
        -- entirely between y=12 and y=13. For the straddler estimate
        -- x using straight-line algebra and draw two pixels, whereas
        -- we can/should just ignore the other and let prev/next segs
        -- set their more accurate pixels (on y=12 and y=13).
        --
        -- For a steep line we want to draw x and x+1 for some int y.
        -- For a flat line we want to draw y and y+1 for some int x.
        --
        bool bSteep = abs(dx)<abs(dy)
        if bSteep then
            integer ly = ceil(y1)
            if ly!=ceil(y4) then -- straddler
--dots += 1
--if remainder(dots,8)<4 then
                x1 += (ly-y1)*dx/dy
                integer x = floor(x1)
                atom fx = x1-x
--              plot(canvas,x,ly,1-fx)
--              plot(canvas,x+1,ly,fx)
                plot(canvas,x-wu_d,ly,1-fx)
                if wu_d=0 then
                    plot(canvas,x+1,ly,fx)
                else
                    for i=-wu_d+1 to wu_d-1 do
                        plot(canvas,x+i,ly,1)
                    end for
                    plot(canvas,x+wu_d,ly,fx)
                end if
--cbp += 1
--end if
            end if
        else -- flat
            integer lx = ceil(x1)
            if lx!=ceil(x4) then -- straddler
--dots += 1
--if remainder(dots,8)<4 then
                y1 += (lx-x1)*dy/dx
                integer y = floor(y1)
                atom fy = y1-y
--              plot(canvas,lx,y,1-fy)
--              plot(canvas,lx,y+1,fy)
                if wu_d=0 then
                    plot(canvas,lx,y,1-fy)
                    plot(canvas,lx,y+1,fy)
                else
                    lx -= 1
                    plot(canvas,lx,y-wu_d,1-fy)
                    for i=-wu_d+1 to wu_d-1 do
                        plot(canvas,lx,y+i,1)
                    end for
                    plot(canvas,lx,y+wu_d,fy)
                end if
--cbp += 1
--end if
            end if
        end if
    else

--DEV/SUG as per gCanvas.exw, pen a ditty to show the de Casteljau construction
--        similar to the second diagram in above doc, with draggable end-points.

        -- l,m,r are the first mid-points,
        -- n,p are the secondary mid-points,
        -- q is the (single) found point on the curve.
        atom lx = (x1+x2)/2,  ly = (y1+y2)/2,
             mx = (x2+x3)/2,  my = (y2+y3)/2,
             rx = (x3+x4)/2,  ry = (y3+y4)/2,
             nx = (lx+mx)/2,  ny = (ly+my)/2,
             px = (mx+rx)/2,  py = (my+ry)/2,
             qx = (nx+px)/2,  qy = (ny+py)/2
        wu_bezier(canvas, x1, y1, lx, ly, nx, ny, qx, qy)
--      gCanvasPixel(canvas,qx,qy,XPG_BLUE) -- (temp)
        wu_bezier(canvas, qx, qy, px, py, rx, ry, x4, y4)
    end if
--d -= 1
end procedure

procedure xCanvasCubicBezier(gdx canvas, atom x1, y1, xc1, yc1, xc2, yc2, x2, y2, integer style=-1, width=-1, atom colour=-1, bool aa=true)
    integer pstyle, pwidth, pcolour
    if style!=-1 then pstyle = gGetAttribute(canvas,"LINESTYLE") gSetAttribute(canvas,"LINESTYLE",style) end if
    if width!=-1 then pwidth = gGetAttribute(canvas,"LINEWIDTH") gSetAttribute(canvas,"LINEWIDTH",width) end if
    if colour!=-1 then pcolour = gGetAttribute(canvas,"FGCLR") gSetAttribute(canvas,"FGCLR",colour) end if
    if aa then
--      wu_d = floor(width/2)
        wu_d = floor(gGetAttribute(canvas,"LINEWIDTH")/2)
        wu_bezier(canvas,x1,y1,xc1,yc1,xc2,yc2,x2,y2)
    else
        gCanvasCubicBezier(canvas,x1,y1,xc1,yc1,xc2,yc2,x2,y2)
    end if
    if colour!=-1 then gSetAttribute(canvas,"FGCLR",pcolour) end if
    if width!=-1 then gSetAttribute(canvas,"LINEWIDTH",pwidth) end if
    if style!=-1 then gSetAttribute(canvas,"LINESTYLE",pstyle) end if
end procedure

procedure gCanvasQuadBezier(gdx canvas, atom x1, y1, cx, cy, x2, y2, integer style=-1, width=-1, colour=-1, bool aa=true)
    -- draw a cubic bezier curve from x1,y1 to x2,y2 
    --                 using the control point cx,cy
    xCanvasCubicBezier(canvas, x1, y1, cx, cy, cx, cy, x2, y2, style, width, colour, aa)
end procedure

procedure redraw(gdx canvas)
--  integer {w, h} = sq_sub(gGetIntInt(canvas, "DRAWSIZE"),10)
    integer {w, h} = sq_sub(gGetIntInt(canvas, "SIZE"),10),
            hm200 = h-200
--  gSetAttribute(canvas,"LINESTYLE",XPG_DASHED)
--  cdCanvasActivate(canvas)
--  cdCanvasClear(canvas)
--  if platform()=JS then
--      gSetAttribute(canvas,"LINEWIDTH",iff(wuline?1:4))
--  end if
--if wuline then
--  wu_line(canvas,0,h,200,hm200)
--  wu_line(canvas,w,h,200,hm200)
--  wu_line(canvas,0,0,200,hm200)
--  wu_line(canvas,w,0,200,hm200)
--else
--  gCanvasLine(canvas,0,h,200,hm200,aa:=wuline)
    gCanvasLine(canvas,0,h,200,hm200)
    gCanvasLine(canvas,w,h,200,hm200)
    gCanvasLine(canvas,0,0,200,hm200)
    gCanvasLine(canvas,w,0,200,hm200)
--end if

if wuline then
    wu_ellipse(canvas,200,hm200,200,200)
--  gCanvasArc[with flags|=XPG_SECTOR](canvas, 200, 200, 200, 200, 0, 360) 
    wu_ellipse(canvas,200,hm200,300,100)
--  wu_ellipse(canvas,200,hm200,300,100,15,50)
--  wu_ellipse(200,200,300,100,15,85)
--  gCanvasArc(canvas, 205, 205, 300, 100, 15, 85) 
else
    gCanvasArc(canvas,200,hm200,200,200,0,360) 
--  gSetAttribute(canvas,"FGCLR",XPG_GREEN)

--  gCanvasArc[with flags|=XPG_SECTOR](canvas, 200, 200, 200, 200, 0, 360) 
    gCanvasArc(canvas,200,hm200,300,100,0,360) 
--  gCanvasArc(canvas,200,hm200,300,100,15,50) 
--  gSetAttribute(canvas,"FGCLR",LINE)

end if
--test - it works (much better) if you draw the polygon /after/ the lines!!
--  cdCanvasBegin(canvas,CD_FILL)
--  cdCanvasVertex(canvas,w,h)
--  cdCanvasVertex(canvas,0,h)
--  cdCanvasVertex(canvas,200,200)
--  cdCanvasEnd(canvas)
--/test
--  gSetAttribute(canvas,"BG_CLR",BACK)
--  gSetAttribute(canvas,"FG_CLR",LINE)
--  gCanvasBezier(canvas,10,10,w-10,10,0,h-10,w-10,h-10)
--dots = 50
if wuline then
    xCanvasCubicBezier(canvas,10,10,w,10,10,h,w,h)
--  xCanvasCubicBezier(canvas,10,10,w,10,10,h,w,h,width:=5)
--  gCanvasQuadBezier(canvas,10,10,w,10,w,h)
--  gCanvasQuadBezier(canvas,10,10,10,h,w,h)
else
    gCanvasCubicBezier(canvas,10,10,w,10,10,h,w,h)
end if
--?cbc
--?{"maxd",maxd}
--?cbp -- 821

--for y=0 to 100 do
----?y
--  for x=0 to 100 do
--      atom c = gCanvasGetPixel(canvas, x+10, y+20)
----        atom c = iff(y=10?XPG_RED:gCanvasGetPixel(canvas, x+10, y+25))
--      gCanvasPixel(canvas, x+100, y+100, c)
--  end for
--end for
end procedure

gdx dlg

procedure set_title()
    string title = TITLE & iff(wuline?" (anti-aliased)":" (bresenham)")
    gSetAttribute(dlg,"TITLE",title)
end procedure

function key_handler(gdx dlg, integer c)
--?{"key_handler",c,{sprintf("#%x",c),gGetKeyName(c)}}
--function key_handler(gdx dlg, integer c, ctrl, shift, alt)
--function key_handler(gdx dlg, integer c, bool ctrl, shift, alt)
--?{"key_handler",c,{sprintf("#%x",c),gGetKeyName(c)},ctrl,shift,alt,gVersion(true)}
--sleep(1)
--DEV make this XPG_DEFAULT:
--  if c=VK_ESC then return XPG_CLOSE end if -- (standard practice for me)
--DEV:
--  if c=VK_F5 then return XPG_DEFAULT end if -- (let browser reload work)
    if c=' ' then
        wuline = not wuline
        set_title()
        gRedraw(dlg)
--else
--  ?c
    end if
--if alt then return XPG_IGNORE end if
    return XPG_CONTINUE
end function

--gdx canvas = gCanvas()
gdx canvas = gCanvas(redraw)
--gSetAttribute(canvas, "RASTERSIZE", "640x480")
--gSetHandler(canvas,"REDRAW", redraw)
gSetAttribute(canvas,"BGCLR",BACK)
gSetAttribute(canvas,"FGCLR",LINE)
--dlg = gDialog(canvas)
dlg = gDialog(canvas,"SIZE=640x480")
set_title()
--DEV
gSetHandler(dlg, `KEY`, key_handler)
gShow(dlg)
--gSetAttribute(canvas, "RASTERSIZE", NULL)
gMainLoop()

